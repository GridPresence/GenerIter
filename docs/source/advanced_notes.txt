For example, if the composer wanted to allocate all the *Hi-Hat* samples in the current directory under a category of *Percussion*, they could issue the command:

.. code-block:: bash
		
   genercat -D Percussion -C Hi-Hat

This would have the effect of creating a *Percussion* subdirectory (unless it already existed) and moving all the files with the *Hi-Hat* string in their file name into that subdirectory. This could be repeated as much as the composer saw fit:

.. code-block:: bash

   genercat -D Percussion -C Snare
   genercat -D Percussion -C Topper
   genercat -D Percussion -C Riser

Where the mapping is even simpler, and the category name matches the string name, a shorter version of the command can be issued:

.. code-block:: bash

   genercat -C Synth

which moves all the files with *Synth* in their filename down into a *Synth* category, assuming the destination is a direct mapping from the **-C** specification supplied.

As the diagram illustrates, some or all of this organisation can be achieved using manual or other scripting operations. The genercat_ utility is provided as a convenience utility only.

The key objective is to ensure that the categorised sample files are ultimately held in a directory named after the category itself:

.. code-block:: bash

   /full/path/to/this/set/is/Drums/My Drum Sample 01.wav
   /full/path/to/this/set/is/Drums/My Drum Sample 02.wav
   /full/path/to/a/different/set/is/Drums/Daves Drum Sample 01.wav
   /full/path/to/some/other/set/is/Drums/Bobs Drum Sample 01.wav
   /full/path/to/free/samples/dRUMS/My Drum Sample 01.wav
   /full/path/to/this/set/is/drums/My Drum Sample 03.wav

The key things to note are:

    #. It is the penultimate element of the full pathname to the sample file is used to determine the category in later operations
    #. The category string as it appears in the path is case-insensitive - e.g. *DRUMS*, *dRUms* or *drums* will each map to the *Drums* category when inventoried
    #. The filename of the sample file does not need to be unique because the reference will always be a full path.
